---
name: Build kubeplay package

on:
  push:
    tag:
      - 'v*'
  release:
    branches: [main, release-*]

env:
  IMAGE_REGISTRY: "ghcr.io"
  REGISTRY_USER: "${{ github.repository_owner }}"
  REGISTRY_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  KUBESPRAY_IMAGE: "ghcr.io/${{ github.repository_owner }}/kubespray"
  KUBEPLAY_IMAGE_REPO: "ghcr.io/${{ github.repository_owner }}/kubeplay"
  OS_TOOLS_IMAGE: "ghcr.io/${{ github.repository_owner }}/os-tools"
  OS_PACKAGES_IMAGE: "ghcr.io/${{ github.repository_owner }}/os-packages"
  KUBESPRAY_FILES_IMAGE: "ghcr.io/${{ github.repository_owner }}/kubespray-files"
  KUBESPRAY_IMAGES_IMAGE: "ghcr.io/${{ github.repository_owner }}/kubespray-images"

jobs:
  build-image:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # fetch all git repo tag for define image tag
          fetch-depth: 0

      - name: Checkout kubespray repo
        uses: actions/checkout@v2
        with:
          ref: master
          fetch-depth: 0
          path: kubespray
          repository: ${{ github.repository_owner }}/kubespray

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_TOKEN }}

      - name: Prepare for build images
        shell: bash
        run: |
          git describe --tags --always | sed 's/^/IMAGE_TAG=/' >> $GITHUB_ENV
          git branch --show-current | sed 's/^/BRANCH_NAME=/' >> $GITHUB_ENV
          git branch --show-current | sed 's/master/latest/;s/main/latest/;s/^/IMAGE_TAG_BY_BRANCH=/' >> $GITHUB_ENV

          cd kubespray && git describe --tags --always | sed 's/^/KUBESPRAY_REPO_TAG=/' >> $GITHUB_ENV
          cd .. && source $GITHUB_ENV

          echo "" >> build/kubeplay/Dockerfile
          echo "COPY --from=${OS_TOOLS_IMAGE}:${IMAGE_TAG} / /resources/nginx" >> build/kubeplay/Dockerfile
          echo "COPY --from=${OS_PACKAGES_IMAGE}:${IMAGE_TAG} / /resources/nginx" >> build/kubeplay/Dockerfile
          echo "COPY --from=${KUBESPRAY_FILES_IMAGE}:${KUBESPRAY_REPO_TAG} / /resources/nginx" >> build/kubeplay/Dockerfile
          echo "COPY --from=${KUBESPRAY_IMAGES_IMAGE}:${KUBESPRAY_REPO_TAG} / /resources/registry" >> build/kubeplay/Dockerfile

      - name: Build and push kubeplay images
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          file: build/kubeplay/Dockerfile
          platforms: linux/amd64,linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            KUBESPRAY_IMAGE=${{ env.KUBESPRAY_IMAGE }}:${{ env.KUBESPRAY_REPO_TAG }}
          tags: |
            ${{ env.KUBEPLAY_IMAGE_REPO }}:${{ env.IMAGE_TAG }}

  build-package:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # fetch all git repo tag for define image tag
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_TOKEN }}

      - name: Prepare for build images
        shell: bash
        run: |
          git describe --tags --always | sed 's/^/IMAGE_TAG=/' >> $GITHUB_ENV
          source $GITHUB_ENV
          echo "FROM ${KUBEPLAY_IMAGE_REPO}:${IMAGE_TAG}" > build/kubeplay/Dockerfile
          while ! skopeo --override-arch arm64 inspect docker://${KUBEPLAY_IMAGE_REPO}:${IMAGE_TAG} > /dev/null; do sleep 30s; done
          while ! skopeo --override-arch amd64 inspect docker://${KUBEPLAY_IMAGE_REPO}:${IMAGE_TAG} > /dev/null; do sleep 30s; done

      - name: Build package
        uses: docker/build-push-action@v2
        with:
          context: .
          file: build/kubeplay/Dockerfile
          platforms: linux/amd64,linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache
          outputs: type=local,dest=./

      - name: Prepare for upload package
        shell: bash
        run: |
          rm -rf linux_{amd64,arm64}/build
          mv linux_amd64 kubeplay
          tar -I pigz -cf kubeplay-${IMAGE_TAG}-linux-amd64.tar.gz kubeplay --remove-files
          mv linux_arm64 kubeplay
          tar -I pigz -cf kubeplay-${IMAGE_TAG}-linux-arm64.tar.gz kubeplay --remove-files
          sha256sum kubeplay-${IMAGE_TAG}-linux-{amd64,arm64}.tar.gz > sha256sum

      - name: Release and upload packages
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            sha256sum
            kubeplay-${{ env.IMAGE_TAG }}-linux-amd64.tar.gz
            kubeplay-${{ env.IMAGE_TAG }}-linux-arm64.tar.gz
